// Code generated by MockGen. DO NOT EDIT.
// Source: tzregion/service (interfaces: ServiceTodo)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	model "tzregion/model"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceTodo is a mock of ServiceTodo interface.
type MockServiceTodo struct {
	ctrl     *gomock.Controller
	recorder *MockServiceTodoMockRecorder
}

// MockServiceTodoMockRecorder is the mock recorder for MockServiceTodo.
type MockServiceTodoMockRecorder struct {
	mock *MockServiceTodo
}

// NewMockServiceTodo creates a new mock instance.
func NewMockServiceTodo(ctrl *gomock.Controller) *MockServiceTodo {
	mock := &MockServiceTodo{ctrl: ctrl}
	mock.recorder = &MockServiceTodoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceTodo) EXPECT() *MockServiceTodoMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockServiceTodo) CreateTodo(arg0 context.Context, arg1 *model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockServiceTodoMockRecorder) CreateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockServiceTodo)(nil).CreateTodo), arg0, arg1)
}

// DeleteTodoById mocks base method.
func (m *MockServiceTodo) DeleteTodoById(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoById indicates an expected call of DeleteTodoById.
func (mr *MockServiceTodoMockRecorder) DeleteTodoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoById", reflect.TypeOf((*MockServiceTodo)(nil).DeleteTodoById), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockServiceTodo) FindAll(arg0 context.Context, arg1 string) ([]*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockServiceTodoMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockServiceTodo)(nil).FindAll), arg0, arg1)
}

// MarkAsDone mocks base method.
func (m *MockServiceTodo) MarkAsDone(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDone indicates an expected call of MarkAsDone.
func (mr *MockServiceTodoMockRecorder) MarkAsDone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDone", reflect.TypeOf((*MockServiceTodo)(nil).MarkAsDone), arg0, arg1, arg2)
}

// UpdateTodoById mocks base method.
func (m *MockServiceTodo) UpdateTodoById(arg0 context.Context, arg1 string, arg2 *model.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoById indicates an expected call of UpdateTodoById.
func (mr *MockServiceTodoMockRecorder) UpdateTodoById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoById", reflect.TypeOf((*MockServiceTodo)(nil).UpdateTodoById), arg0, arg1, arg2)
}
